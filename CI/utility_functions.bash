#! /bin/echo This file is meant to be sourced

change_uid_gid_of_docker_user() {
    local host_uid=$1
    local host_gid=$2

    sudo usermod -u $host_uid docker    
    sudo groupmod -g $host_gid docker
    sudo find / -path /proc -prune -o -user docker -exec chown -h $host_uid {} \;
    sudo find / -path /proc -prune -o -group docker -exec chgrp -h $host_gid {} \;
    sudo usermod -g $host_gid docker
    sudo usermod -d /home/docker docker
}

install_sarus() {
    local prefixdir=$1; shift
    local build_type=$1; shift
    local enable_security_checks=$1; shift
    local pwd_backup=$(pwd)

    local enable_coverage=FALSE
    if [ "$build_type" = "Debug" ]; then
        enable_coverage=TRUE
    fi

    # build Sarus
    cd /sarus-source
    mkdir -p build && cd build
    cmake   -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchain_files/gcc-gcov.cmake \
            -DCMAKE_BUILD_TYPE=$build_type \
            -DENABLE_RUNTIME_SECURITY_CHECKS=$enable_security_checks \
            -DENABLE_TESTS_WITH_GCOV=$enable_coverage \
            -DENABLE_TESTS_WITH_VALGRIND=FALSE \
            -DENABLE_SSH=TRUE \
            -DCMAKE_INSTALL_PREFIX=$prefixdir \
            ..
    make -j$(nproc)

    # install Sarus
    sudo make install
    sudo cp $prefixdir/etc/sarus.json.example $prefixdir/etc/sarus.json
    sudo sed -i -e 's@"centralizedRepositoryDir": *".*"@"centralizedRepositoryDir": "/home/docker/sarus_centralized_repository"@' $prefixdir/etc/sarus.json
    sudo mkdir -p /var/sarus/OCIBundleDir
    export PATH=$prefixdir/bin:$PATH

    cd $pwd_backup
}

generate_slurm_conf() {
    slurm_conf_file=$1

    shift
    controller=$1

    shift
    servers=( "$@" )

    cat << EOF > $slurm_conf_file
#
# Example slurm.conf file. Please run configurator.html
# (in doc/html) to build a configuration file customized
# for your environment.
#
#
# slurm.conf file generated by configurator.html.
#
# See the slurm.conf man page for more information.
#
ClusterName=virtual-cluster
ControlMachine=$controller
SlurmUser=slurm
SlurmctldPort=6817
SlurmdPort=6818
StateSaveLocation=/var/lib/slurm-llnl
SlurmdSpoolDir=/tmp/slurmd
SwitchType=switch/none
MpiDefault=none
SlurmctldPidFile=/var/run/slurmctld.pid
SlurmdPidFile=/var/run/slurmd.pid
ProctrackType=proctrack/pgid
CacheGroups=0
ReturnToService=0
SlurmctldTimeout=300
SlurmdTimeout=300
InactiveLimit=0
MinJobAge=300
KillWait=30
Waittime=0
SchedulerType=sched/backfill
SelectType=select/linear
FastSchedule=1
# LOGGING
SlurmctldDebug=3
SlurmdDebug=3
JobCompType=jobcomp/none
EOF

    echo "# COMPUTE NODES" >> $slurm_conf_file
    for server in "${servers[@]}"; do
    echo "Nodename=$server" >> $slurm_conf_file
    done

    partition_nodes=
    for server in "${servers[@]}"; do
        if [ ! -z "$partition_nodes" ]; then
            partition_nodes=$partition_nodes,
        fi
        partition_nodes=$partition_nodes$server
    done
    echo "PartitionName=debug Nodes=$partition_nodes Default=YES MaxTime=INFINITE State=UP" >> $slurm_conf_file

    cat << EOF >> $slurm_conf_file
GresTypes=gpu
# settings required by SLURM plugin
PrologFlags=Alloc,Contain
EOF
}
